{"version":3,"sources":["modules/Files/index.js"],"names":[],"mappings":"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","file":"modules/Files/index.js","sourcesContent":["import React from 'react';\nimport Modal from 'react-bootstrap/lib/Modal';\nimport request from 'superagent';\n\nimport File from './File';\n\nexport default class Files extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // grab the first bot that is available to process a job\n    let initialBotUuid = undefined;\n\n    this.state = {\n      showModal: false,\n      botUuid: this.getActiveBotUuid(props),\n    };\n    this.handleProcessFile = this.handleProcessFile.bind(this);\n    this.close = this.close.bind(this);\n    this.startJob = this.startJob.bind(this);\n    this.change = this.change.bind(this);\n  }\n\n  handleProcessFile(fileInfo) {\n    this.setState({\n      showModal: true,\n      fileUuid: fileInfo.uuid,\n      fileName: fileInfo.name,\n    });\n  }\n\n  close() {\n    this.setState({ showModal: false });\n  }\n\n  change(event) {\n    this.setState({ botUuid: event.target.value });\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.setState({\n      botUuid: this.getActiveBotUuid(newProps),\n    });\n  }\n\n  getActiveBotUuid(props) {\n    if (props.conducting) {\n      return -1;\n    }\n    for (const [botUuid, bot] of Object.entries(this.props.bots)) {\n      // Only allow jobs to be stared on a bot in the state \"connected\"\n      if (bot.state !== `connected`) {\n        continue;\n      }\n      return botUuid;\n    }\n    return undefined;\n  }\n\n  createBotList() {\n    const options = [];\n    if (this.props.conducting) {\n      options.unshift(<option key={-1} value={-1}>Conductor</option>);\n    }\n    Object.entries(this.props.bots).map(([botUuid, bot]) => {\n      // Only allow jobs to be stared on a bot in the state \"connected\"\n      if (bot.state !== `connected`) {\n        return;\n      }\n      options.push(<option key={botUuid} value={botUuid}>{bot.settings.name}</option>);\n    });\n    return (\n      <select name=\"botList\" onChange={this.change} form=\"newJobForm\">\n        {options}\n      </select>\n    );\n  }\n\n  startJob() {\n    // Create a job\n    const requestParams = {\n      fileUuid: this.state.fileUuid,\n      botUuid: this.state.botUuid,\n      startJob: true,\n    };\n\n    request.post(`/v1/jobs`)\n    .send(requestParams)\n    .set('Accept', 'application/json')\n    .end();\n    this.close();\n  }\n\n  renderModal() {\n    return (\n    <Modal show={this.state.showModal} onHide={this.close}>\n      <Modal.Header closeButton>\n        <Modal.Title>Modal heading</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <div>{this.state.fileUuid}</div>\n        <div>{this.state.fileName}</div>\n        {this.createBotList()}\n        <button onClick={this.startJob}>Start Job</button>\n      </Modal.Body>\n      <Modal.Footer>\n        <button onClick={this.close}>Close</button>\n      </Modal.Footer>\n    </Modal>\n    );\n  }\n\n  render() {\n    const files = Object.entries(this.props.files).map(([fileKey, file]) => {\n      return <File key={file.uuid} file={file} handleProcessFile={this.handleProcessFile}/>;\n    });\n    return (<div>\n      {this.renderModal()}\n      <h1>Files</h1>\n      <button onClick={this.props.dropzoneOpener}>Upload File</button>\n      <br></br>\n      <br></br>\n      <div>{files}</div>\n    </div>);\n  }\n}\n"],"sourceRoot":"/source/"}