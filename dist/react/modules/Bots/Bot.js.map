{"version":3,"sources":["modules/Bots/Bot.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEe,MAAM,GAAN,SAAkB,gBAAM,SAAxB,CAAkC;AAC/C,cAAY,KAAZ,EAAmB;AACjB,UAAM,KAAN;;AAEA,SAAK,cAAL,GAAsB,KAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,CAAtB;;AAEA,SAAK,KAAL,GAAa;AACX,iBAAW,KADA;AAEX,mBAAa;AAFF,KAAb;AAID;;AAED,iBAAe,GAAf,EAAoB;AAClB,SAAK,QAAL,CAAc;AACZ,mBAAa;AADD,KAAd;AAGD;;AAED,WAAS;AACP,WACE;AAAA;AAAA;AACE;AAAA;AAAA,UAAM,WAAW,KAAK,KAAL,CAAW,WAA5B,EAAyC,UAAU,KAAK,cAAxD;AACE;AAAA;AAAA,YAAK,UAAU,CAAf,EAAkB,OAAM,WAAxB;AACE,+DAAW,KAAK,KAAK,KAAL,CAAW,GAA3B;AADF,SADF;AAIE;AAAA;AAAA,YAAK,UAAU,CAAf,EAAkB,OAAM,UAAxB;AACE,8DAAU,KAAK,KAAK,KAAL,CAAW,GAA1B;AADF,SAJF;AAOE;AAAA;AAAA,YAAK,UAAU,CAAf,EAAkB,OAAM,UAAxB;AACE,8DAAU,KAAK,KAAK,KAAL,CAAW,GAA1B;AADF;AAPF;AADF,KADF;AAeD;AAlC8C;;kBAA5B,G,EAsCrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA","file":"modules/Bots/Bot.js","sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/lib/Button';\nimport Modal from 'react-bootstrap/lib/Modal';\nimport Tab from 'react-bootstrap/lib/Tab';\nimport Tabs from 'react-bootstrap/lib/Tabs';\nimport request from 'superagent';\nimport { Link } from 'react-router';\nimport _ from 'underscore';\n\nimport Dashboard from './Dashboard';\nimport Terminal from './Terminal';\nimport Settings from './Settings';\n\nexport default class Bot extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.tabSelectEvent = this.tabSelectEvent.bind(this);\n\n    this.state = {\n      showModal: false,\n      selectedTab: 1,\n    };\n  }\n\n  tabSelectEvent(key) {\n    this.setState({\n      selectedTab: key,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Tabs activeKey={this.state.selectedTab} onSelect={this.tabSelectEvent}>\n          <Tab eventKey={1} title=\"Dashboard\">\n            <Dashboard bot={this.props.bot}/>\n          </Tab>\n          <Tab eventKey={2} title=\"Terminal\">\n            <Terminal bot={this.props.bot}/>\n          </Tab>\n          <Tab eventKey={3} title=\"Settings\">\n            <Settings bot={this.props.bot}/>\n          </Tab>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\n\n/*\n<div className=\"row\">\n  <div className=\"col-md-12\">\n    {this.renderConnectButton()}\n    <Button style={{margin: \"5px\"}} onClick={this.toggleModal}>Edit Bot</Button>\n    {this.renderJobButtons()}\n    <div>State: {this.props.bot.state}</div>\n    <div>Job State: {this.props.currentJob === undefined ? `Not processing job` : `${this.props.currentJob.state}. ${this.props.currentJob.percentComplete}%` }</div>\n    <JogPanel endpoint={`/v1/bots/${this.props.bot.settings.uuid}`}/>\n    <Button onClick={this.homeX} disabled={this.checkDisabled()}>Home X</Button>\n    <Button onClick={this.homeY} disabled={this.checkDisabled()}>Home Y</Button>\n    <Button onClick={this.homeZ} disabled={this.checkDisabled()}>Home Z</Button>\n    <Button onClick={this.homeAll} disabled={this.checkDisabled()}>Home Axes</Button>\n    <div className=\"clearfix\">\n      <div style={{ float: 'left', margin: '0px 5px 5px 5px' }}>\n        <form onSubmit={this.processGcode}>\n          <input type=\"textarea\" name=\"gcode\" disabled={this.checkDisabled()}></input>\n        <br/>\n          <input type=\"submit\" value=\"Send Gcode\" disabled={this.checkDisabled()}></input>\n        </form>\n      </div>\n      <div style={{ float: 'left', margin: '0px 5px 5px 5px' }}>\n        <form onSubmit={this.setTemp}>\n          <input type=\"textarea\" name=\"temp\" disabled={this.checkDisabled()}></input>\n        <br/>\n          <input type=\"submit\" value=\"Set Extruder Temp\" disabled={this.checkDisabled()}></input>\n        </form>\n      </div>\n    </div>\n    <div>Port: {this.props.bot.port}</div>\n    <div>Temp:{this.props.bot.status.sensors ? this.props.bot.status.sensors.t0 : '?'}</div>\n    <div>\n      X:{`${this.props.bot.status.position ? this.props.bot.status.position.x : `?`} `}\n      Y:{`${this.props.bot.status.position ? this.props.bot.status.position.y : `?`} `}\n      Z:{`${this.props.bot.status.position ? this.props.bot.status.position.z : `?`} `}\n      E:{`${this.props.bot.status.position ? this.props.bot.status.position.e : `?`} `}\n    </div>\n    { this.props.conducting ?\n      (<form onSubmit={this.choir}>\n        <h3>Jog alll the bots</h3>\n        <input type=\"textarea\" name=\"gcode\" placeholder=\"Enter Gcode Here\"></input>\n        <br/>\n        <input type=\"submit\" value=\"Send Gcode to all bots\"></input>\n      </form>) : ``\n    }\n  </div>\n</div>\n{this.renderModal()}\n*/\n\n/*\ndetect() {\n  request.post(`/v1/bots/${this.props.bot.settings.uuid}`)\n  .send({ command: `checkSubscription` })\n  .end();\n}\n\ndeleteBot() {\n  request.delete(`/v1/bots/${this.props.bot.settings.uuid}`)\n  .end();\n  this.closeModal();\n}\n\npauseJob() {\n  request.post(`/v1/bots/${this.props.bot.settings.uuid}`)\n  .send({ command: `pause` })\n  .end();\n  this.closeModal();\n}\n\nresumeJob() {\n  request.post(`/v1/bots/${this.props.bot.settings.uuid}`)\n  .send({ command: `resume` })\n  .end();\n  this.closeModal();\n}\n\ncancelJob() {\n  request.post(`/v1/bots/${this.props.bot.settings.uuid}`)\n  .send({ command: `cancel` })\n  .end();\n  this.closeModal();\n}\n\nprocessGcode(event) {\n  event.preventDefault();\n  const gcode = event.target.gcode.value;\n  request.post(`/v1/bots/${this.props.bot.settings.uuid}`)\n  .send({ command: `processGcode` })\n  .send({ gcode })\n  .end();\n}\n\nsetTemp(event) {\n  event.preventDefault();\n  const temp = event.target.temp.value;\n  request.post(`/v1/bots/${this.props.bot.settings.uuid}`)\n  .send({ command: `processGcode` })\n  .send({ gcode: `M104 S${temp}` })\n  .end();\n}\n\nhomeX(event) {\n  event.preventDefault();\n  request.post(`/v1/bots/${this.props.bot.settings.uuid}`)\n  .send({ command: `processGcode` })\n  .send({ gcode: `G28 X` })\n  .end();\n}\n\nhomeY(event) {\n  event.preventDefault();\n  request.post(`/v1/bots/${this.props.bot.settings.uuid}`)\n  .send({ command: `processGcode` })\n  .send({ gcode: `G28 Y` })\n  .end();\n}\n\nhomeZ(event) {\n  event.preventDefault();\n  request.post(`/v1/bots/${this.props.bot.settings.uuid}`)\n  .send({ command: `processGcode` })\n  .send({ gcode: `G28 Z` })\n  .end();\n}\n\nhomeAll(event) {\n  event.preventDefault();\n  request.post(`/v1/bots/${this.props.bot.settings.uuid}`)\n  .send({ command: `processGcode` })\n  .send({ gcode: `G28` })\n  .end();\n}\n\nchoir(event) {\n  event.preventDefault();\n  const gcode = event.target.gcode.value;\n  request.post(`/v1/conductor/`)\n  .send({ command: `choir` })\n  .send({ gcode })\n  .end();\n}\n\nconnect() {\n  request.post(`/v1/bots/${this.props.bot.settings.uuid}`)\n  .send({ command: `connect` })\n  .set('Accept', 'application/json')\n  .end();\n}\n\ndisconnect() {\n  request.post(`/v1/bots/${this.props.bot.settings.uuid}`)\n  .send({ command: `disconnect` })\n  .set('Accept', 'application/json')\n  .end();\n}\n\nrenderConnectButton() {\n  switch (this.props.bot.state) {\n    case `unavailable`:\n      return <Button style={{margin: \"5px\"}} onClick={this.detect}>Detect</Button>;\n    case `ready`:\n      return <Button bsStyle=\"success\" style={{margin: \"5px\"}} onClick={this.connect}>Connect</Button>;\n    case `connected`:\n      return <Button bsStyle=\"danger\" style={{margin: \"5px\"}} onClick={this.disconnect}>Disconnect</Button>;\n    default:\n      return <Button style={{margin: \"5px\"}} disabled>Nope!</Button>;\n  }\n}\n\nupdateBot(event) {\n  event.preventDefault();\n  let update = request.put(`/v1/bots/${this.props.bot.settings.uuid}`)\n  for (const [settingKey, setting] of _.pairs(this.props.bot.settings)) {\n    const paramJson = {};\n    if (event.target[settingKey] !== undefined) {\n      paramJson[settingKey] = event.target[settingKey].value;\n      update = update.send(paramJson);\n    }\n  }\n  update = update.set('Accept', 'application/json');\n  try {\n    update.end();\n    this.closeModal();\n  } catch (ex) {\n    console.log(`Update error`, ex);\n  }\n}\n\ntoggleModal() {\n  this.setState({\n    showModal: !this.state.showModal,\n  });\n}\n\ncloseModal() {\n  this.setState({ showModal: false });\n}\n\nrenderJobButtons() {\n  const buttons = [];\n  if (this.props.currentJob === undefined) {\n    buttons.push(<Button style={{margin: \"5px\"}} disabled>Nope</Button>);\n    buttons.push(<Button style={{margin: \"5px\"}} bsStyle=\"danger\" disabled>Nope</Button>);\n  } else {\n    switch (this.props.currentJob.state) {\n      case `running`:\n        buttons.push(<Button style={{margin: \"5px\"}} onClick={this.pauseJob}>Pause</Button>);\n        buttons.push(<Button style={{margin: \"5px\"}} bsStyle=\"danger\" onClick={this.cancelJob}>Cancel</Button>);\n        break;\n      case `paused`:\n        buttons.push(<Button style={{margin: \"5px\"}} onClick={this.resumeJob}>Resume</Button>);\n        buttons.push(<Button style={{margin: \"5px\"}} bsStyle=\"danger\" onClick={this.cancelJob}>Cancel</Button>);\n        break;\n      default:\n        buttons.push(<Button style={{margin: \"5px\"}} disabled>Nope</Button>);\n        buttons.push(<Button style={{margin: \"5px\"}} bsStyle=\"danger\" disabled>Nope</Button>);\n        break;\n    }\n  }\n  return buttons;\n}\n\ncheckDisabled() {\n  let disabled = false;\n  switch (this.props.bot.state) {\n    case `detecting`:\n    case `ready`:\n    case `startingJob`:\n    case `stopping`:\n    case `parking`:\n    case `unparking`:\n    case `unavailable`:\n    case `connecting`:\n      disabled = true;\n      break;\n    default:\n      break;\n  }\n  return disabled;\n}\n\nrenderModal() {\n  return (<Modal show={this.state.showModal} onHide={this.closeModal}>\n    <Modal.Header closeButton>\n      <Modal.Title>Edit Bot</Modal.Title>\n    </Modal.Header>\n    <Modal.Body>\n      <form onSubmit={this.updateBot}>\n        {_.pairs(this.props.bot.settings).map(([settingKey, setting]) => {\n          switch (settingKey) {\n            case `createdAt`:\n            case `updatedAt`:\n            case `uuid`:\n            case `id`:\n            case `model`:\n              return;\n            case `endpoint`:\n              if (this.props.botPresets[this.props.bot.settings.model].info.connectionType === `serial`) {\n                return;\n              }\n            default:\n              return (<div key={settingKey}>\n                <label key={`${settingKey}label`} htmlFor={settingKey}>{settingKey}</label>\n                <input key={`${settingKey}input`} type=\"textarea\" name={settingKey} defaultValue={setting}/>\n              </div>);\n          }\n        })}\n        <Button bsStyle=\"primary\" type=\"submit\">Update Bot</Button>\n      </form>\n    </Modal.Body>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <Button bsStyle=\"danger\" onClick={this.deleteBot}>Delete Bot</Button>\n  </Modal>);\n}\n*/\n"],"sourceRoot":"/source/"}