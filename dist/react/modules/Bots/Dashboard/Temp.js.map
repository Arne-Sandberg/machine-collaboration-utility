{"version":3,"sources":["modules/Bots/Dashboard/Temp.js"],"names":[],"mappings":"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","file":"modules/Bots/Dashboard/Temp.js","sourcesContent":["import React from 'react';\nimport request from 'superagent';\n\nexport default class Temp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setTemp = this.setTemp.bind(this);\n    this.processGcode = this.processGcode.bind(this);\n  }\n\n  setTemp(event) {\n    event.preventDefault();\n\n    const endpoint = `/v1/bots/${this.props.bot.settings.uuid}`;\n    const temp = Number(event.target.setpoint.value);\n\n    // Don't update the temp unless the value passed is a number 0 or greater\n    if (!Number.isNaN(temp) && temp >= 0) {\n      request.post(endpoint)\n      .send({ command: `processGcode` })\n      .send({ gcode: `M104 S${event.target.setpoint.value}` })\n      .set('Accept', 'application/json')\n      .end();\n    }\n  }\n\n  processGcode(gcode) {\n    const endpoint = `/v1/bots/${this.props.bot.settings.uuid}`;\n\n    request.post(endpoint)\n    .send({ command: `processGcode` })\n    .send({ gcode })\n    .set('Accept', 'application/json')\n    .end();\n  }\n\n  renderOnOff() {\n    const t0 = this.props.bot.status.sensors.t0 === undefined ?\n      { temperature: '?', setpoint: '?' } : this.props.bot.status.sensors.t0;\n\n    if (Number(t0.setpoint) === 0) {\n      return <button onClick={() => { this.processGcode(`M104 S${this.props.bot.settings.tempE}`) } }>Turn On ({this.props.bot.settings.tempE}&#x2103;)</button>;\n    } else if (Number(t0.setpoint) > 0 || Number(t0.setpoint < 0)) {\n      return <button onClick={() => { this.processGcode(`M104 S0`) } }>Turn Off (0&#x2103;)</button>;\n    }\n    return <button disabled>On/Off</button>;\n  }\n\n  render() {\n    const t0 = this.props.bot.status.sensors.t0 === undefined ?\n      { temperature: '?', setpoint: '?' } : this.props.bot.status.sensors.t0;\n    return (\n      <div className=\"row\">\n        <h3>TEMPERATURE CONTROL</h3>\n        <div className=\"col-sm-3\">\n          <p>&#x25EF; Extruder</p>\n        </div>\n        <div className=\"col-sm-3\">\n          <form onSubmit={this.setTemp}>\n            <div className=\"row\">\n              <input type=\"text\" name=\"setpoint\" className=\"col-sm-5\"/>\n              <input type=\"submit\" value=\"*\" className=\"col-sm-1\"/>\n            </div>\n          </form>\n        </div>\n        <div className=\"col-sm-3\">\n          <p>{t0.temperature} / {t0.setpoint}</p>\n        </div>\n        <div className=\"col-sm-3\">\n          {this.renderOnOff()}\n        </div>\n      </div>\n    );\n  }\n}\n"],"sourceRoot":"/source/"}