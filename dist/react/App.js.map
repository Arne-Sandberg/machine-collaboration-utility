{"version":3,"sources":["App.js"],"names":[],"mappings":"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","file":"App.js","sourcesContent":["/* global APP_VAR, io */\n\nimport React from 'react';\nimport Header from './modules/Header';\nimport Dropzone from 'react-dropzone';\nimport request from 'superagent';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    try {\n      this.state = APP_VAR;\n    } catch (ex) {\n      this.state = props.params;\n    }\n    this.openDropzone = this.openDropzone.bind(this);\n  }\n\n  componentDidMount() {\n    // Don't notice socket event on the server side\n    if (require('is-browser')) {\n      this.socket = io();\n      this.socket.on('botEvent', (bot) => {\n        const newBots = this.state.bots;\n        switch (bot.event) {\n          case `new`:\n          case `update`:\n            newBots[bot.uuid] = bot.data;\n            this.setState({ bots: newBots });\n            break;\n          case `delete`:\n            delete newBots[bot.uuid];\n            this.setState({ bots: newBots });\n            break;\n          default:\n            break;\n        }\n      });\n      this.socket.on('fileEvent', (file) => {\n        const newFiles = this.state.files;\n        switch (file.event) {\n          case `new`:\n            newFiles[file.uuid] = file.data;\n            this.setState({ files: newFiles });\n            break;\n          case `delete`:\n            delete newFiles[file.uuid];\n            this.setState({ files: newFiles });\n            break;\n          default:\n            break;\n        }\n      });\n      this.socket.on('jobEvent', (job) => {\n        const newJobs = this.state.jobs;\n        const newBots = this.state.bots;\n        switch (job.event) {\n          case `new`:\n          case `update`:\n            newJobs[job.uuid] = job.data;\n            try {\n              newBots[job.data.botUuid].currentJob = job.data;\n            } catch (ex) {\n              console.log(`Failed to update bots from job event`, ex);\n            }\n            this.setState({\n              jobs: newJobs,\n              bots: newBots,\n            });\n            break;\n          case `delete`:\n            delete newJobs[job.uuid];\n            this.setState({ jobs: newJobs });\n            break;\n          default:\n            break;\n        }\n      });\n    }\n  }\n\n  onDrop(files) {\n    const req = request.post('/v1/files');\n    files.forEach((file) => {\n      req.attach(file.name, file);\n    });\n    req.end(() => {\n      // Called after the file is uploaded\n    });\n  }\n\n  openDropzone() {\n    this.refs.dropzone.open();\n  }\n\n  render() {\n    const dropzoneStyle = {\n      width: `100%`,\n      height: `100%`,\n    };\n    const childrenComponents = React.Children.map(this.props.children, child => {\n      // mapping through all of the children components in order to inject hydraPrint app objects\n      return React.cloneElement(child, Object.assign({}, this.state, { dropzoneOpener: this.openDropzone }));\n    });\n    return (\n      <Dropzone\n        ref=\"dropzone\"\n        style={dropzoneStyle}\n        onDrop={this.onDrop}\n        disableClick\n      >\n        <Header/>\n        {childrenComponents}\n      </Dropzone>\n    );\n  }\n}\n"],"sourceRoot":"/source/"}